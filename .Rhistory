# BEGIN ASSIGNMENT
# DO NOT PUT install.packages() IN A SUBMISSION TO GRADESCOPE!!!
library(tidyverse)
library(ggrepel)
theme_set(theme_bw())
library(arrow)
library(tidymodels)
tidymodels_prefer()
# DO NOT PUT install.packages() IN A SUBMISSION TO GRADESCOPE!!!
library(tidyverse)
library(ggrepel)
theme_set(theme_bw())
library(arrow)
library(tidymodels)
tidymodels_prefer()
cyclones <- read_parquet("cyclones_data.parquet")
cyclones_by_name <- cyclones |>
group_by(Name, NameYear, Basin) |>
arrange(date) |>
summarise(
start_lat = lat[1],
start_lon = lon[1],
end_lat = lat[n()],
end_lon = lon[n()],
# YOUR CODE HERE
max_cat = factor(max(category, na.rm = TRUE), ordered = FALSE),
.groups = "drop"
) |>
mutate(
# YOUR CODE HERE
) |>
filter(!is.na(min_pressure) & !is.infinite(min_pressure))
cyclones <- read_parquet("cyclones_data.parquet")
cyclones_by_name <- cyclones |>
group_by(Name, NameYear, Basin) |>
arrange(date) |>
summarise(
start_lat = lat[1],
start_lon = lon[1],
end_lat = lat[n()],
end_lon = lon[n()],
start_date = min(date, na.rm = TRUE),
end_date = max(date, na.rm = TRUE),
lowest_lat = min(lat, na.rm = TRUE),
highest_lat = max(lat, na.rm = TRUE),
lowest_lon = min(lon, na.rm = TRUE),
highest_lon = max(lon, na.rm = TRUE),
max_wind = max(wind, na.rm = TRUE),
min_pressure = min(pressure, na.rm = TRUE),
max_cat = factor(max(category, na.rm = TRUE), ordered = FALSE),
.groups = "drop"
) |>
mutate(
storm_length = as.numeric(difftime(end_date, start_date, units = "days")),
lat_change = end_lat - start_lat,
lon_change = end_lon - start_lon
) |>
filter(!is.na(min_pressure) & !is.infinite(min_pressure))
cyclones
colnames(cyclones)
cyclones <- read_parquet("cyclones_data.parquet")
colnames(cyclones)
cyclones_by_name <- cyclones |>
group_by(Name, NameYear, Basin) |>
arrange(date) |>
summarise(
start_lat = lat[1],
start_lon = lon[1],
end_lat = lat[n()],
end_lon = lon[n()],
start_date = min(date, na.rm = TRUE),
end_date = max(date, na.rm = TRUE),
lowest_lat = min(lat, na.rm = TRUE),
highest_lat = max(lat, na.rm = TRUE),
lowest_lon = min(lon, na.rm = TRUE),
highest_lon = max(lon, na.rm = TRUE),
max_wind = max(max_wind, na.rm = TRUE),
min_pressure = min(min_pressure, na.rm = TRUE),
max_cat = factor(max(category, na.rm = TRUE), ordered = FALSE),
.groups = "drop"
) |>
mutate(
storm_length = as.numeric(difftime(end_date, start_date, units = "days")),
lat_change = end_lat - start_lat,
lon_change = end_lon - start_lon
) |>
filter(!is.na(min_pressure) & !is.infinite(min_pressure))
cyclones_by_name
. = ottr::check("tests/cyclones_by_name.R")
cyclones_split <- initial_split(cyclones_by_name, prop = 0.6, strata = Basin)
validation_split <- validation_split(training(cyclones_split), prop = 0.25)
cyclones_split
cyclones_split <- initial_split(cyclones_by_name, prop = 0.6, strata = Basin)
validation_split <- initial_validation_split(training(cyclones_split), prop = 0.25)
cyclones_split <- initial_split(cyclones_by_name, prop = 0.6, strata = Basin)
validation_split <- validation_split(training(cyclones_split), prop = 0.25)
cyclones_split
cyclones_split <- initial_split(cyclones_by_name, prop = 0.6, strata = Basin)
validation_split <- validation_split(training(cyclones_split), prop = 0.25)
cyclones_split
. = ottr::check("tests/cyclones_split.R")
cyclones_split <- initial_split(cyclones_by_name, prop = 0.6, strata = Basin)
validation_split <- initial_validation_split(training(cyclones_split), prop = 0.25)
cyclones_split <- initial_validation_split(
cyclones_by_name,
prop = c(train = 0.6, validation = 0.2),
strata = Basin
)
cyclones_split
cyclones_split <- initial_validation_split(
cyclones_by_name,
prop = c(train = 0.6, validation = 0.2),
strata = Basin
)
cyclones_split
. = ottr::check("tests/cyclones_split.R")
cyclones_recipes <- list(
recipe_1 = recipe(min_pressure ~ max_wind + max_cat + storm_length, data = training(cyclones_split)),
recipe_2 = recipe(min_pressure ~ lat_change + lon_change + lowest_lat + highest_lat, data = training(cyclones_split)),
recipe_3 = recipe(min_pressure ~ start_lat + start_lon + max_cat + highest_lon, data = training(cyclones_split))
)
cyclones_recipes
. = ottr::check("tests/cyclones_recipes.R")
cyclones_workflow_set <- workflow_set(
preproc = cyclones_recipes,
models = list(lm = linear_reg() |> set_engine("lm"))
)
cyclones_workflow_set
. = ottr::check("tests/cyclones_workflow_set.R")
# YOUR CODE HERE
set.seed(42)
cyclones_fit <- cyclones_workflow_set |>
workflow_map(
fn = "fit_resamples",
resamples = validation_split,
metrics = metric_set(rmse, rsq)
)
cyclones_fit
# Also plot the results for you to see.
cyclones_fit |>
collect_metrics() |>
ggplot() +
aes(x = wflow_id, y = mean) +
geom_col(fill = "lightgrey", colour = "black") +
facet_wrap(~ .metric, scales = "free")
set.seed(42)
cyclones_fit <- cyclones_workflow_set |>
workflow_map(
fn = "fit_resamples",
resamples = validation_split,
metrics = metric_set(rmse, rsq)
)
cyclones_fit
# Also plot the results for you to see.
cyclones_fit |>
collect_metrics() |>
ggplot() +
aes(x = wflow_id, y = mean) +
geom_col(fill = "lightgrey", colour = "black") +
facet_wrap(~ .metric, scales = "free")
. = ottr::check("tests/cyclones_fit.R")
train_test <- initial_split(cyclones_by_name, prop = 0.8)
rf <- rand_forest(trees = 1000, mtry = tune(), min_n = 3) |>
set_engine("randomForest") |>
set_mode("regression")
tune_grid <- tibble(mtry = 1:3)
lm_versus_rf <- workflow_set(
preproc = cyclones_recipes,
models = list(lm = linear_reg() |> set_engine("lm"), rf = rf)
) |>
workflow_map(
fn = "tune_grid",
grid = tune_grid,
seed = 100,
control = control_grid(save_pred = TRUE, save_workflow = TRUE),
resamples = vfold_cv(training(cyclones_split), v = 5)
)
lm_versus_rf |>
autoplot(select_best = TRUE, metric = "rmse") +
geom_label_repel(aes(label = wflow_id))
train_test <- initial_split(cyclones_by_name, prop = 0.8)
rf <- rand_forest(trees = 1000, mtry = tune(), min_n = 3) |>
set_engine("randomForest") |>
set_mode("regression")
tune_grid <- tibble(mtry = 1:3)
lm_versus_rf <- workflow_set(
preproc = cyclones_recipes,
models = list(lm = linear_reg() |> set_engine("lm"), rf = rf)
) |>
workflow_map(
fn = "tune_grid",
grid = tune_grid,
seed = 100,
control = control_grid(save_pred = TRUE, save_workflow = TRUE),
resamples = vfold_cv(training(cyclones_split), v = 5)
)
lm_versus_rf |>
autoplot(select_best = TRUE, metric = "rmse") +
geom_label_repel(aes(label = wflow_id))
install.packages("randomForest")
train_test <- initial_split(cyclones_by_name, prop = 0.8)
rf <- rand_forest(trees = 1000, mtry = tune(), min_n = 3) |>
set_engine("randomForest") |>
set_mode("regression")
tune_grid <- tibble(mtry = 1:3)
lm_versus_rf <- workflow_set(
preproc = cyclones_recipes,
models = list(lm = linear_reg() |> set_engine("lm"), rf = rf)
) |>
workflow_map(
fn = "tune_grid",
grid = tune_grid,
seed = 100,
control = control_grid(save_pred = TRUE, save_workflow = TRUE),
resamples = vfold_cv(training(cyclones_split), v = 5)
)
lm_versus_rf |>
autoplot(select_best = TRUE, metric = "rmse") +
geom_label_repel(aes(label = wflow_id))
train_test <- initial_split(cyclones_by_name, prop = 0.8)
rf <- rand_forest(trees = 1000, mtry = tune(), min_n = 3) |>
set_engine("randomForest") |>
set_mode("regression")
tune_grid <- tibble(mtry = 1:3)
lm_versus_rf <- workflow_set(
preproc = cyclones_recipes,
models = list(lm = linear_reg() |> set_engine("lm"), rf = rf)
) |>
workflow_map(
fn = "tune_grid",
grid = tune_grid,
seed = 100,
control = control_grid(save_pred = TRUE, save_workflow = TRUE),
resamples = vfold_cv(training(cyclones_split), v = 5)
)
lm_versus_rf |>
autoplot(select_best = TRUE, metric = "rmse") +
geom_label_repel(aes(label = wflow_id))
. = ottr::check("tests/lm_versus_rf.R")
train_test <- initial_split(cyclones_by_name, prop = 0.8)
rf <- rand_forest(trees = 1000, mtry = tune(), min_n = 3) |>
set_engine("randomForest") |>
set_mode("regression")
tune_grid <- tibble(mtry = 1:3)
lm_versus_rf <- workflow_set(
preproc = cyclones_recipes,
models = list(lm = linear_reg() |> set_engine("lm"), rf = rf)
) |>
workflow_map(
fn = "tune_grid",
grid = tune_grid,
seed = 100,
control = control_grid(save_pred = TRUE, save_workflow = TRUE),
resamples = vfold_cv(training(cyclones_split), v = 5)
)
lm_versus_rf |>
autoplot(select_best = TRUE, metric = "rmse") +
geom_label_repel(aes(label = wflow_id))
best_lm_workflow <- lm_versus_rf |>
extract_workflow_set_result("recipe_1_lm") |>
select_best(metric = "rmse")
best_rf_workflow <- lm_versus_rf |>
extract_workflow_set_result("recipe_2_rf") |>
select_best(metric = "rmse")
. = ottr::check("tests/best_model.R")
. = ottr::check("tests/lm_versus_rf.R")
best_lm_workflow <- lm_versus_rf |>
extract_workflow_set_result("recipe_1_lm") |>
select_best(metric = "rmse")
best_rf_workflow <- lm_versus_rf |>
extract_workflow_set_result("recipe_2_rf") |>
select_best(metric = "rmse")
. = ottr::check("tests/best_model.R")
# Select the best linear model
best_lm <- lm_versus_rf |>
extract_workflow_set_result("recipe_1_lm") |>
select_best(metric = "rmse")
# Select the best random forest model
best_rf <- lm_versus_rf |>
extract_workflow_set_result("recipe_2_rf") |>
select_best(metric = "rmse")```
```{r}
. = ottr::check("tests/best_model.R")
# Select the best linear model
best_lm <- lm_versus_rf |>
extract_workflow_set_result("recipe_1_lm") |>
select_best(metric = "rmse")
# Select the best random forest model
best_rf <- lm_versus_rf |>
extract_workflow_set_result("recipe_2_rf") |>
select_best(metric = "rmse")
. = ottr::check("tests/best_model.R")
. = ottr::check("tests/best_model.R")
# Select the best linear model
best_lm <- lm_versus_rf |>
extract_workflow_set_result("recipe_1_lm") |>
select_best(metric = "rmse")
# Select the best random forest model
best_rf <- lm_versus_rf |>
extract_workflow_set_result("recipe_2_rf") |>
select_best(metric = "rmse")
. = ottr::check("tests/best_model.R")
# Select the best workflow for the linear model
best_lm_workflow <- lm_versus_rf |>
extract_workflow_set_result("recipe_1_lm") |>
select_best(metric = "rmse")
# Select the best workflow for the random forest
best_rf_workflow <- lm_versus_rf |>
extract_workflow_set_result("recipe_2_rf") |>
select_best(metric = "rmse")
# Finalize workflows (assign these as the final workflows for later fitting)
best_lm <- finalize_workflow(best_lm_workflow, parameters = best_lm_workflow)
best_rf <- finalize_workflow(best_rf_workflow, parameters = best_rf_workflow)
# Select the best workflow for the linear model
best_lm_workflow <- lm_versus_rf |>
extract_workflow_set_result("recipe_1_lm") |>
select_best(metric = "rmse")
# Select the best workflow for the random forest
best_rf_workflow <- lm_versus_rf |>
extract_workflow_set_result("recipe_2_rf") |>
select_best(metric = "rmse")
# Finalize workflows (assign these as the final workflows for later fitting)
best_lm <- finalize_workflow(best_lm_workflow, parameters = best_lm_workflow)
best_rf <- finalize_workflow(best_rf_workflow, parameters = best_rf_workflow)
# Select the best workflow for the linear model
best_lm_workflow <- lm_versus_rf |>
extract_workflow_set_result("recipe_1_lm") |>
select_best(metric = "rmse")
# Select the best workflow for the random forest
best_rf_workflow <- lm_versus_rf |>
extract_workflow_set_result("recipe_2_rf") |>
select_best(metric = "rmse")
. = ottr::check("tests/best_model.R")
# Select the best hyperparameter combination for the linear model
best_lm_hyperparameters <- lm_versus_rf |>
extract_workflow_set_result("recipe_1_lm") |>
select_best(metric = "rmse")
# Finalize the linear model workflow using the best hyperparameters
best_lm_workflow <- lm_versus_rf |>
extract_workflow("recipe_1_lm") |>
finalize_workflow(best_lm_hyperparameters)
# Select the best hyperparameter combination for the random forest model
best_rf_hyperparameters <- lm_versus_rf |>
extract_workflow_set_result("recipe_2_rf") |>
select_best(metric = "rmse")
# Finalize the random forest workflow using the best hyperparameters
best_rf_workflow <- lm_versus_rf |>
extract_workflow("recipe_2_rf") |>
finalize_workflow(best_rf_hyperparameters)
. = ottr::check("tests/best_model.R")
. = ottr::check("tests/best_model.R")
# Select the best hyperparameter combination for the linear model
best_lm_hyperparameters <- lm_versus_rf |>
extract_workflow_set_result("recipe_1_lm") |>
select_best(metric = "rmse")
# Finalize the linear model workflow using the best hyperparameters
best_lm_workflow <- lm_versus_rf |>
extract_workflow("recipe_1_lm") |>
finalize_workflow(best_lm_hyperparameters)
# Select the best hyperparameter combination for the random forest model
best_rf_hyperparameters <- lm_versus_rf |>
extract_workflow_set_result("recipe_2_rf") |>
select_best(metric = "rmse")
# Finalize the random forest workflow using the best hyperparameters
best_rf_workflow <- lm_versus_rf |>
extract_workflow("recipe_2_rf") |>
finalize_workflow(best_rf_hyperparameters)
. = ottr::check("tests/best_model.R")
# Select the best workflow for the linear model
best_lm <- lm_versus_rf |>
extract_workflow("recipe_1_lm")
# Select the best workflow for the random forest
best_rf <- lm_versus_rf |>
extract_workflow("recipe_2_rf")
. = ottr::check("tests/best_model.R")
best_lm <- lm_versus_rf |>
extract_workflow("recipe_1_lm")
best_rf <- lm_versus_rf |>
extract_workflow("recipe_2_rf")
. = ottr::check("tests/best_model.R")
test_lm <- best_lm |> last_fit(cyclones_split)
test_rf <- best_rf |> last_fit(cyclones_split)
test_lm <- best_lm |> last_fit(cyclones_split)
test_rf <- best_rf |> last_fit(cyclones_split)
test_lm <- best_lm |> last_fit(cyclones_split)
test_rf <- best_rf |> last_fit(cyclones_split)
best_rf_hyperparameters <- lm_versus_rf |>
extract_workflow_set_result("recipe_2_rf") |>
select_best(metric = "rmse")
best_rf <- best_rf |> finalize_workflow(best_rf_hyperparameters)
# Fit the finalized workflows to the test set
test_lm <- best_lm |> last_fit(cyclones_split)
test_rf <- best_rf |> last_fit(cyclones_split)
cat("\nBest RMSE and R^2:\n")
bind_rows(
lm = collect_metrics(test_lm),
rf = collect_metrics(test_rf),
.id = "model"
)
cat("\nPredictors used:\n")
extract_recipe(test_lm) |> formula()
extract_recipe(test_rf) |> formula()
# Plot the predictions versus observed
bind_rows(
lm = collect_predictions(test_lm),
rf = collect_predictions(test_rf),
.id = "model"
) |>
ggplot() +
aes(x = min_pressure, y = .pred, colour = model) +
geom_point(shape = 1)
# Plot the metrics
bind_rows(
lm = test_lm,
rf = test_rf,
.id = "model"
) |>
# This is almost certainly a better way to do this, but I do not know it.
unnest_wider(.metrics) |>
unnest_longer(c(.metric, .estimator, .estimate, .config)) |>
ggplot() +
aes(x = model, y = .estimate) +
geom_col(fill = "lightgrey", color = 1) +
facet_wrap(~ .metric, scales = "free_y")
. = ottr::check("tests/test_fit.R")
# END ASSIGNMENT
best_rf_hyperparameters <- lm_versus_rf |>
extract_workflow_set_result("recipe_2_rf") |>
select_best(metric = "rmse")
best_rf <- best_rf |> finalize_workflow(best_rf_hyperparameters)
test_lm <- best_lm |> last_fit(cyclones_split)
test_rf <- best_rf |> last_fit(cyclones_split)
cat("\nBest RMSE and R^2:\n")
bind_rows(
lm = collect_metrics(test_lm),
rf = collect_metrics(test_rf),
.id = "model"
)
cat("\nPredictors used:\n")
extract_recipe(test_lm) |> formula()
extract_recipe(test_rf) |> formula()
# Plot the predictions versus observed
bind_rows(
lm = collect_predictions(test_lm),
rf = collect_predictions(test_rf),
.id = "model"
) |>
ggplot() +
aes(x = min_pressure, y = .pred, colour = model) +
geom_point(shape = 1)
# Plot the metrics
bind_rows(
lm = test_lm,
rf = test_rf,
.id = "model"
) |>
# This is almost certainly a better way to do this, but I do not know it.
unnest_wider(.metrics) |>
unnest_longer(c(.metric, .estimator, .estimate, .config)) |>
ggplot() +
aes(x = model, y = .estimate) +
geom_col(fill = "lightgrey", color = 1) +
facet_wrap(~ .metric, scales = "free_y")
